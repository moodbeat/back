from aiogram import Router, flags
from aiogram.filters import Text
from aiogram.filters.command import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, InlineKeyboardButton, Message
from aiogram.utils.keyboard import InlineKeyboardBuilder

from config_reader import config
from middlewares import AuthMiddleware
from services.condition_service import (get_current_user_with_condition,
                                        post_condition_data)
from utils.local_datetime import get_local_datetime_now

router = Router()

router.message.middleware(AuthMiddleware())
router.callback_query.middleware(AuthMiddleware())


def mood_keyboard():
    keyboard = InlineKeyboardBuilder()
    buttons = []
    for id, emoji in enumerate('‚òπüôÅüòêüôÇüòÉ', start=1):
        buttons.append(InlineKeyboardButton(
            text=emoji,
            callback_data=f'mood_{id}'
        )
        )
    keyboard.row(*buttons)
    return keyboard


@router.message(Command('conditions'))
@flags.state_reset
async def cmd_conditions(message: Message, state: FSMContext):
    user = await get_current_user_with_condition(state)
    keyboard = mood_keyboard()

    if not user.latest_condition:
        await message.answer(
            f'–ü—Ä–∏–≤–µ—Ç, {user.first_name}!\n\n'
            '–í—ã –µ—â—ë –Ω–µ –æ—Ü–µ–Ω–∏–≤–∞–ª–∏ —Å–≤–æ—ë –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ.\n'
            '–ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –í–∞–º –∫–∞–∫ –º–æ–∂–Ω–æ '
            '—Å–∫–æ—Ä–µ–µ —ç—Ç–æ —Å–¥–µ–ª–∞—Ç—å.',
            reply_markup=keyboard.as_markup()
        )
    elif (
        get_local_datetime_now() - user.latest_condition.date
    ).total_seconds() > config.CONDITION_PERIOD_SEC:
        await message.answer(
            f'–ü—Ä–∏–≤–µ—Ç, {user.first_name}!\n\n'
            '–í—ã –¥–∞–≤–Ω–æ –Ω–µ –æ—Ü–µ–Ω–∏–≤–∞–ª–∏ —Å–≤–æ—ë –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ.\n'
            '–ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –í–∞–º –∫–∞–∫ –º–æ–∂–Ω–æ '
            '—Å–∫–æ—Ä–µ–µ —ç—Ç–æ —Å–¥–µ–ª–∞—Ç—å.',
            reply_markup=keyboard.as_markup()
        )
    else:
        mood = '‚òπüôÅüòêüôÇüòÉ'
        await message.answer(
            f'–ü—Ä–∏–≤–µ—Ç, {user.first_name}!\n\n'
            '–í–∞–º –ø–æ–∫–∞ —Ä–∞–Ω–æ –æ—Ü–µ–Ω–∏–≤–∞—Ç—å —Å–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ.\n'
            '–í–∞—à–∞ –∞–∫—Ç—É–∞–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ 5-—Ç–∏ –±–∞–ª—å–Ω–æ–π —à–∫–∞–ª–µ: '
            f'{user.latest_condition.mood}\n'
            f'{mood[user.latest_condition.mood - 1]}'
        )


@router.callback_query(Text(startswith='mood_'))
async def get_condition(callback: CallbackQuery, state: FSMContext):
    mood = int(callback.data.split('_')[1])
    await post_condition_data(mood, state)
    await callback.message.delete()
    await callback.message.answer('–í—ã –æ—Ü–µ–Ω–∏–ª–∏ —Å–≤–æ—ë —Å–æ—Å—Ç–æ—è–Ω–∏–µ')
